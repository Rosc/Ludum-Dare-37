<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>PLACEHOLDER_Player</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>CanShoot</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>PlayerHealth</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>5</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>CanShoot</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set the Player's max speed, joystick deadzones, and shooting requency so we can fine tune later
var PlayerXSpeed = 5;
var PlayerYSpeed = 5;
var LJoyXDeadzone = 0.15;
var LJoyYDeadzone = 0.15;
var RJoyXDeadzone = 0.3;
var RJoyYDeadzone = 0.3;
var BulletFreq = 20;
  //  show_debug_message(PlayerHealth);

// Two functionally identical movement checks.
// We're checking for W or S hold downs. If found, set the player speed to max up or down. It's really meant to be a fallback. Controller is king for a twin stick shooter.
// For controller check, we're just making sure we have a value outside the deadzone.  If found, just multiply the joystick value against the max speed to give us variable output.
// Deadzone is necessary here, otherwise the character will drift on centered sticks.
// Final step is to zero out movement if no input is detected.  This'll keepo the player character from running off on its own.
if (keyboard_check(ord('W'))) {
    vspeed = -1 * PlayerYSpeed;
} else if (keyboard_check(ord('S'))) {
    vspeed = PlayerYSpeed;
} else if ((gamepad_axis_value(0, gp_axislv) &gt; LJoyYDeadzone) || (gamepad_axis_value(0, gp_axislv) &lt; (-1 * LJoyYDeadzone))) {
    vspeed = gamepad_axis_value(0, gp_axislv) * PlayerYSpeed;
} else {
    vspeed = 0;
}

// Rinse and repeat for horizontal movement.
if (keyboard_check(ord('A'))) {
    hspeed = -1 * PlayerXSpeed;
} else if (keyboard_check(ord('D'))) {
    hspeed = PlayerXSpeed;
} else if ((gamepad_axis_value(0, gp_axislh) &gt; LJoyXDeadzone) || (gamepad_axis_value(0, gp_axislh) &lt; (-1 * LJoyXDeadzone))) {
    hspeed = gamepad_axis_value(0, gp_axislh) * PlayerXSpeed;
} else {
    hspeed = 0;
}

// Isn't that a nice ugly one?  Just a big check to see if there's any input from the arrow keys or right thumbstick
// If there is and we're clear to shoot, make a bullet, reset the timer and disable further shots
if ((keyboard_check(vk_up) || keyboard_check(vk_down) || keyboard_check(vk_left) || keyboard_check(vk_right) || gamepad_axis_value(0, gp_axisrv) &gt; RJoyYDeadzone || gamepad_axis_value(0, gp_axisrv) &lt; (-1 * RJoyYDeadzone) || gamepad_axis_value(0, gp_axisrh) &gt; RJoyXDeadzone || gamepad_axis_value(0, gp_axisrh) &lt; (-1 * RJoyXDeadzone)) &amp;&amp; CanShoot == true) {
    CanShoot = false;
    alarm[0] = BulletFreq;
    instance_create(x, y, PlayerBullet);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
