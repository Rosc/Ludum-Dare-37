<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>PLACEHOLDER_Playerbullet</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set the bullet speed and joystick deadzones so we can fine tune later
//It's unncessary to do it here, but I'm also setting the bullet death alarm in code.  If I put it in GUI editor, I'll never remember it's there later.
var BulletXSpeed = 9;
var BulletYSpeed = 9;
var JoyXDeadzone = 0.3;
var JoyYDeadzone = 0.3;
alarm[0] = 240;

// Oh, look at that.  It's cut and pasted from the player movement code, but with keybind and stick changes.
if (keyboard_check(vk_up)) {
    vspeed = -1 * BulletYSpeed;
} else if (keyboard_check(vk_down)) {
    vspeed = BulletYSpeed;
} else {
    vspeed = 0;
}

// Rinse and repeat for horizontal movement.
if (keyboard_check(vk_left)) {
    hspeed = -1 * BulletXSpeed;
} else if (keyboard_check(vk_right)) {
    hspeed = BulletXSpeed;
} else {
    hspeed = 0;
}

// I lied.  Bullets want to be free!  We can't encumber them with analog-induced speed limits. We have to turn those inputs into a direction and use motion_set
if ((gamepad_axis_value(0, gp_axisrh) &gt; JoyXDeadzone) || (gamepad_axis_value(0, gp_axisrh) &lt; (-1 * JoyXDeadzone)) || (gamepad_axis_value(0, gp_axisrv) &gt; JoyYDeadzone) || (gamepad_axis_value(0, gp_axisrv) &lt; (-1 * JoyYDeadzone))) {
    // yay, math.  I had to look this up :( Angle should be the inverse tangent of X over Y
    // Trap for those of us years out of school: The above answer comes out in radians. Have to convert it to degrees.
    BulletAngle = radtodeg(arctan(gamepad_axis_value(0, gp_axisrv) * -1 / gamepad_axis_value(0, gp_axisrh)));
    // radtodeg apparently only works on a scale of 180 degrees.  We have to adjust manually to get a full circle.
    if (gamepad_axis_value(0, gp_axisrh) &lt; 0) { BulletAngle = BulletAngle - 180; }
    // It's unnecessary for this implementation because they should be the same, but I'm averaging the Bullet X and Y speed.   I didn't feel like picking one.
    motion_set(BulletAngle, ((BulletXSpeed + BulletYSpeed) / 2));
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
